{"version":3,"sources":["../../../../src/components/ui/input/textarea-field.tsx","../../../../src/util/tailwind-util/class-names/index.ts","../../../../src/components/ui/input/description.tsx","../../../../src/components/ui/input/error-message.tsx","../../../../src/components/ui/input/label.tsx","../../../../src/components/ui/input/textarea.tsx"],"sourcesContent":["import { useState } from \"react\";\nimport InputDescription, { InputDescriptionProps } from \"./description\";\nimport InputErrorMessage, { InputErrorMessageProps } from \"./error-message\";\nimport InputLabel, { InputLabelProps } from \"./label\";\nimport Textarea, { TextareaProps } from \"./textarea\";\n\ninterface TextareaFieldProps\n  extends Omit<TextareaProps, \"onValueLength\">,\n    Partial<\n      Pick<InputLabelProps, \"label\"> &\n        Pick<InputDescriptionProps, \"description\"> &\n        Pick<InputErrorMessageProps, \"errorMessage\">\n    > {\n  labelOption?: InputLabelProps[\"option\"];\n}\n\nexport default function TextareaField({\n  label,\n  labelOption,\n  value,\n  placeholder,\n  minLength,\n  maxLength,\n  disabled,\n  description,\n  errorMessage,\n  className,\n  onChange,\n}: TextareaFieldProps) {\n  const [filteredLength, setFilteredLength] = useState(0);\n\n  const lengthInfo = maxLength ? `(${filteredLength}/${maxLength})` : undefined;\n\n  return (\n    <div className=\"inline-flex w-fit flex-col gap-1\">\n      <InputLabel label={label} option={labelOption} />\n      <Textarea\n        value={value}\n        placeholder={placeholder}\n        minLength={minLength}\n        maxLength={maxLength}\n        disabled={disabled}\n        onChange={onChange}\n        onValueLength={setFilteredLength}\n        className={className}\n      />\n      {!errorMessage && description && (\n        <InputDescription description={description} option={lengthInfo} />\n      )}\n      {errorMessage && (\n        <InputErrorMessage errorMessage={errorMessage} option={lengthInfo} />\n      )}\n    </div>\n  );\n}\n","export function classNames(...classes: (string | undefined)[]) {\n  return classes.filter(Boolean).join(\" \");\n}\n","import { classNames } from \"@taling-ui/util/tailwind-util/class-names\";\n\nexport interface InputDescriptionProps {\n  description?: string;\n  option?: string;\n  className?: string;\n}\n\nexport default function InputDescription({\n  description = \"description\",\n  option,\n  className,\n}: InputDescriptionProps) {\n  return (\n    <div\n      className={classNames(\n        \"inline-flex items-center gap-1 text-caption1-regular text-neutral\",\n        className,\n      )}\n    >\n      {option && <span className=\"inline-block\">{option}</span>}\n      <span className=\"inline-block\">{description}</span>\n    </div>\n  );\n}\n","import { classNames } from \"@taling-ui/util/tailwind-util/class-names\";\n\nexport interface InputErrorMessageProps {\n  errorMessage?: string;\n  option?: string;\n  className?: string;\n}\n\nexport default function InputErrorMessage({\n  errorMessage = \"error\",\n  option,\n  className,\n}: InputErrorMessageProps) {\n  return (\n    <div\n      className={classNames(\n        \"inline-flex items-center gap-1 text-caption1-regular text-danger\",\n        className,\n      )}\n    >\n      {option && <span className=\"inline-block\">{option}</span>}\n      <span className=\"inline-block\">{errorMessage}</span>\n    </div>\n  );\n}\n","import { classNames } from \"@taling-ui/util/tailwind-util/class-names\";\n\nexport interface InputLabelProps {\n  label?: string;\n  option?: \"필수\" | \"선택\";\n  className?: string;\n}\n\nexport default function InputLabel({\n  label = \"label\",\n  option,\n  className,\n}: InputLabelProps) {\n  return (\n    <div className={classNames(\"inline-flex items-center gap-0.5\", className)}>\n      <span className=\"inline-block text-label1normal-regular text-neutral\">\n        {label}\n      </span>\n      {option && (\n        <span\n          className={classNames(\n            \"inline-block text-caption1-regular\",\n            option === \"선택\" ? \"text-high-emphasis\" : \"text-danger\",\n          )}\n        >\n          {`(${option})`}\n        </span>\n      )}\n    </div>\n  );\n}\n","import { classNames } from \"@taling-ui/util/tailwind-util/class-names\";\n\nexport interface TextareaProps {\n  value?: string;\n  placeholder?: string;\n  minLength?: number;\n  maxLength?: number;\n  disabled?: boolean;\n  className?: string;\n  charFilter?: string | RegExp | ((value: string) => string);\n  onChange?: (e: React.ChangeEvent<HTMLTextAreaElement>) => void;\n  onValueLength?: (length: number) => void;\n}\n\nexport default function Textarea({\n  value,\n  placeholder = \"입력해주세요\",\n  minLength,\n  maxLength,\n  disabled,\n  className,\n  charFilter,\n  onChange,\n  onValueLength,\n}: TextareaProps) {\n  const filterValue = (value: string) => {\n    if (!charFilter) return value;\n\n    if (typeof charFilter === \"function\") {\n      return charFilter(value);\n    }\n\n    if (charFilter instanceof RegExp) {\n      return value.replace(charFilter, \"\");\n    }\n\n    return value.replace(new RegExp(charFilter, \"g\"), \"\");\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    let newValue = e.target.value;\n\n    newValue = filterValue(newValue);\n    onValueLength?.(newValue.length);\n    onChange?.({ ...e, target: { ...e.target, value: newValue } });\n  };\n\n  return (\n    <textarea\n      className={classNames(\n        `min-h-[9.125rem] min-w-[16.5rem] appearance-none rounded-md border\n        border-taling-gray-300 bg-taling-white px-3 py-2.5 text-label1normal-regular\n        text-strong placeholder:text-label1normal-regular placeholder:text-low-emphasis\n        focus:border-primary focus:ring-1 focus:ring-inset focus:ring-primary\n        disabled:bg-taling-gray-200 disabled:text-disabled`,\n        className,\n      )}\n      value={value}\n      placeholder={placeholder}\n      minLength={minLength}\n      maxLength={maxLength}\n      disabled={disabled}\n      onChange={handleChange}\n    />\n  );\n}\n"],"mappings":"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","names":["value"]}