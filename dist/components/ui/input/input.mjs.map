{"version":3,"sources":["../../../../src/util/tailwind-util/class-names/index.ts","../../../../src/components/ui/input/input.tsx"],"sourcesContent":["export function classNames(...classes: (string | undefined)[]) {\n  return classes.filter(Boolean).join(\" \");\n}\n","import { classNames } from \"@taling-ui/util/tailwind-util/class-names\";\nimport { useEffect, useState } from \"react\";\n\nexport interface InputProps {\n  value?: string | number;\n  valueType?: \"string\" | \"int\" | \"float\";\n  placeholder?: string;\n  minLength?: number;\n  maxLength?: number;\n  disabled?: boolean;\n  type?: string;\n  className?: string;\n  displayModifier?: {\n    wrap: (value: string) => string;\n    unwrap: (value: string) => string;\n  };\n  charFilter?: string | RegExp | ((value: string) => string);\n  onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  onValueLength?: (length: number) => void;\n}\n\nexport default function Input({\n  value,\n  valueType = \"string\",\n  placeholder = \"입력해주세요\",\n  minLength,\n  maxLength,\n  disabled,\n  type = \"text\",\n  className,\n  displayModifier,\n  charFilter,\n  onChange,\n  onValueLength,\n}: InputProps) {\n  const [displayValue, setDisplayValue] = useState<string>(\n    value?.toString() || \"\",\n  );\n\n  const getInputType = () => {\n    if (displayModifier) {\n      return \"text\";\n    }\n\n    if (valueType === \"string\") {\n      return type;\n    }\n    if (valueType === \"int\" || valueType === \"float\") {\n      return \"number\";\n    }\n    return type;\n  };\n\n  const inputType = getInputType();\n  const step = valueType === \"float\" ? \"any\" : \"1\";\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (valueType === \"int\" || valueType === \"float\") {\n      if ([\"e\", \"E\", \"+\", \"-\"].includes(e.key)) {\n        e.preventDefault();\n      }\n    }\n\n    if (valueType === \"int\" && e.key === \".\") {\n      e.preventDefault();\n    }\n  };\n\n  const filterValue = (value: string) => {\n    if (!charFilter) return value;\n\n    if (typeof charFilter === \"function\") {\n      return charFilter(value);\n    }\n\n    if (charFilter instanceof RegExp) {\n      return value.replace(charFilter, \"\");\n    }\n\n    return value.replace(new RegExp(charFilter, \"g\"), \"\");\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    let newValue = e.target.value;\n\n    newValue = filterValue(newValue);\n\n    if (displayModifier) {\n      const unwrappedValue = displayModifier.unwrap(newValue);\n      setDisplayValue(displayModifier.wrap(unwrappedValue));\n      onValueLength?.(unwrappedValue.length);\n\n      const modifiedEvent = {\n        ...e,\n        target: {\n          ...e.target,\n          value: unwrappedValue,\n        },\n      } as React.ChangeEvent<HTMLInputElement>;\n\n      onChange?.(modifiedEvent);\n    } else {\n      setDisplayValue(newValue);\n      onValueLength?.(newValue.length);\n      onChange?.({\n        ...e,\n        target: {\n          ...e.target,\n          value: newValue,\n        },\n      } as React.ChangeEvent<HTMLInputElement>);\n    }\n  };\n\n  useEffect(() => {\n    if (displayModifier) {\n      setDisplayValue(displayModifier.wrap(value?.toString() || \"\"));\n      return;\n    }\n    setDisplayValue(value?.toString() || \"\");\n  }, [value, displayModifier]);\n\n  return (\n    <input\n      type={inputType}\n      step={step}\n      onKeyDown={handleKeyDown}\n      pattern={valueType === \"int\" ? \"[0-9]*\" : undefined}\n      className={classNames(\n        `h-10 min-w-[16.5rem] appearance-none rounded-md border border-taling-gray-300\n        bg-taling-white px-3 py-2.5 text-label1normal-regular text-strong\n        placeholder:text-label1normal-regular placeholder:text-low-emphasis\n        focus:border-primary focus:ring-1 focus:ring-inset focus:ring-primary\n        disabled:bg-taling-gray-200 disabled:text-disabled`,\n        className,\n      )}\n      value={displayValue}\n      placeholder={placeholder}\n      minLength={minLength}\n      maxLength={maxLength}\n      disabled={disabled}\n      onChange={handleChange}\n    />\n  );\n}\n"],"mappings":";AAAO,SAAS,cAAc,SAAiC;AAC7D,SAAO,QAAQ,OAAO,OAAO,EAAE,KAAK,GAAG;AACzC;;;ACDA,SAAS,WAAW,gBAAgB;AAoBrB,SAAR,MAAuB;AAAA,EAC5B;AAAA,EACA,YAAY;AAAA,EACZ,cAAc;AAAA,EACd;AAAA,EACA;AAAA,EACA;AAAA,EACA,OAAO;AAAA,EACP;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAAe;AACb,QAAM,CAAC,cAAc,eAAe,IAAI;AAAA,KACtC,+BAAO,eAAc;AAAA,EACvB;AAEA,QAAM,eAAe,MAAM;AACzB,QAAI,iBAAiB;AACnB,aAAO;AAAA,IACT;AAEA,QAAI,cAAc,UAAU;AAC1B,aAAO;AAAA,IACT;AACA,QAAI,cAAc,SAAS,cAAc,SAAS;AAChD,aAAO;AAAA,IACT;AACA,WAAO;AAAA,EACT;AAEA,QAAM,YAAY,aAAa;AAC/B,QAAM,OAAO,cAAc,UAAU,QAAQ;AAE7C,QAAM,gBAAgB,CAAC,MAA6C;AAClE,QAAI,cAAc,SAAS,cAAc,SAAS;AAChD,UAAI,CAAC,KAAK,KAAK,KAAK,GAAG,EAAE,SAAS,EAAE,GAAG,GAAG;AACxC,UAAE,eAAe;AAAA,MACnB;AAAA,IACF;AAEA,QAAI,cAAc,SAAS,EAAE,QAAQ,KAAK;AACxC,QAAE,eAAe;AAAA,IACnB;AAAA,EACF;AAEA,QAAM,cAAc,CAACA,WAAkB;AACrC,QAAI,CAAC,WAAY,QAAOA;AAExB,QAAI,OAAO,eAAe,YAAY;AACpC,aAAO,WAAWA,MAAK;AAAA,IACzB;AAEA,QAAI,sBAAsB,QAAQ;AAChC,aAAOA,OAAM,QAAQ,YAAY,EAAE;AAAA,IACrC;AAEA,WAAOA,OAAM,QAAQ,IAAI,OAAO,YAAY,GAAG,GAAG,EAAE;AAAA,EACtD;AAEA,QAAM,eAAe,CAAC,MAA2C;AAC/D,QAAI,WAAW,EAAE,OAAO;AAExB,eAAW,YAAY,QAAQ;AAE/B,QAAI,iBAAiB;AACnB,YAAM,iBAAiB,gBAAgB,OAAO,QAAQ;AACtD,sBAAgB,gBAAgB,KAAK,cAAc,CAAC;AACpD,qDAAgB,eAAe;AAE/B,YAAM,gBAAgB;AAAA,QACpB,GAAG;AAAA,QACH,QAAQ;AAAA,UACN,GAAG,EAAE;AAAA,UACL,OAAO;AAAA,QACT;AAAA,MACF;AAEA,2CAAW;AAAA,IACb,OAAO;AACL,sBAAgB,QAAQ;AACxB,qDAAgB,SAAS;AACzB,2CAAW;AAAA,QACT,GAAG;AAAA,QACH,QAAQ;AAAA,UACN,GAAG,EAAE;AAAA,UACL,OAAO;AAAA,QACT;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAEA,YAAU,MAAM;AACd,QAAI,iBAAiB;AACnB,sBAAgB,gBAAgB,MAAK,+BAAO,eAAc,EAAE,CAAC;AAC7D;AAAA,IACF;AACA,qBAAgB,+BAAO,eAAc,EAAE;AAAA,EACzC,GAAG,CAAC,OAAO,eAAe,CAAC;AAE3B,SACE;AAAA,IAAC;AAAA;AAAA,MACC,MAAM;AAAA,MACN;AAAA,MACA,WAAW;AAAA,MACX,SAAS,cAAc,QAAQ,WAAW;AAAA,MAC1C,WAAW;AAAA,QACT;AAAA;AAAA;AAAA;AAAA;AAAA,QAKA;AAAA,MACF;AAAA,MACA,OAAO;AAAA,MACP;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,UAAU;AAAA;AAAA,EACZ;AAEJ;","names":["value"]}