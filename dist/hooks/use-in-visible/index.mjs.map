{"version":3,"sources":["../../../src/hooks/use-in-visible/index.ts"],"sourcesContent":["import { useEffect, useState } from \"react\";\n\nexport function useIsVisible(ref: any) {\n  const [isIntersecting, setIntersecting] = useState<boolean | null>(null);\n  const [isIntersectingStart, setIntersectingStart] = useState<boolean | null>(\n    null\n  );\n  useEffect(() => {\n    const observer = new IntersectionObserver(([entry]) => {\n      setIntersecting(entry.isIntersecting);\n      // if entry is outside of viewport (start and top of the viewport)\n      setIntersectingStart(entry.boundingClientRect.top > 0);\n    });\n\n    if (ref.current) {\n      observer.observe(ref.current);\n    }\n    return () => {\n      observer.disconnect();\n    };\n  }, [ref]);\n\n  return {\n    isIntersecting,\n    isIntersectingStart,\n  };\n}\n"],"mappings":";AAAA,SAAS,WAAW,gBAAgB;AAE7B,SAAS,aAAa,KAAU;AACrC,QAAM,CAAC,gBAAgB,eAAe,IAAI,SAAyB,IAAI;AACvE,QAAM,CAAC,qBAAqB,oBAAoB,IAAI;AAAA,IAClD;AAAA,EACF;AACA,YAAU,MAAM;AACd,UAAM,WAAW,IAAI,qBAAqB,CAAC,CAAC,KAAK,MAAM;AACrD,sBAAgB,MAAM,cAAc;AAEpC,2BAAqB,MAAM,mBAAmB,MAAM,CAAC;AAAA,IACvD,CAAC;AAED,QAAI,IAAI,SAAS;AACf,eAAS,QAAQ,IAAI,OAAO;AAAA,IAC9B;AACA,WAAO,MAAM;AACX,eAAS,WAAW;AAAA,IACtB;AAAA,EACF,GAAG,CAAC,GAAG,CAAC;AAER,SAAO;AAAA,IACL;AAAA,IACA;AAAA,EACF;AACF;","names":[]}